{
  "permissions": {
    "allow": [
      "Bash(npm run:*)",
      "Bash(npx nx list:*)",
      "Bash(npx nx show:*)",
      "Bash(npx nx run-many:*)",
      "Bash(npx nx test:*)",
      "Bash(npx nx build:*)",
      "Bash(npx prettier:*)",
      "Bash(git add:*)",
      "Bash(npx nx generate:*)",
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(git restore:*)",
      "Bash(npm install:*)",
      "Bash(git commit:*)",
      "Bash(npx nx g:*)",
      "Bash(npx nx vite:test:*)",
      "Bash(npx vitest run:*)",
      "Bash(npx nx lint:*)",
      "Bash(npx nx eslint:lint:*)",
      "Bash(npx nx format:*)",
      "Bash(mv:*)",
      "Bash(npx nx e2e:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(docker compose:*)",
      "Bash(curl:*)",
      "Bash(npx nx serve:*)",
      "Bash(docker volume:*)",
      "Bash(docker run:*)",
      "Bash(./scripts/extract-fhir-credentials.sh:*)",
      "Bash(npx nx reset:*)",
      "Bash(FHIR_SERVER_URL=http://localhost:8081 FHIR_CLIENT_ID=form-auto-population-service FHIR_CLIENT_SECRET=ihEFkJ3xOgFw5y1qJyEwVcES15m2ztNFxAw6MGL+9+c npx nx serve form-auto-population-service)",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "Bash(nx run-many:*)",
      "Read(//Users/rnorman/Projects/fhir-mod-demo/**)",
      "Bash(tree:*)",
      "Bash(npx husky init:*)",
      "Bash(HUSKY=0 git commit -m \"$(cat <<''EOF''\nfeat: enhance TypeScript configuration with strict mode\n\n- Enable TypeScript strict mode with comprehensive type checking\n- Update to ES2022 target with modern module resolution\n- Add strict type checking rules for better code quality\n- Note: Some legacy test files need linting fixes (addressed separately)\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(HUSKY=0 git commit -m \"$(cat <<''EOF''\nfeat: enhance testing strategy with comprehensive coverage\n\n- Add Jest configuration with coverage thresholds and reporting\n- Configure test scripts for watch mode, coverage, and e2e testing\n- Add build scripts for affected projects\n- Set up comprehensive test patterns and environment\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(HUSKY=0 git commit -m \"$(cat <<''EOF''\nfeat: implement comprehensive CI/CD pipeline with GitHub Actions\n\n- Add GitHub Actions workflow with affected project detection\n- Parallel execution of lint, test, build, and type checking\n- E2E testing with database services for main branch\n- Coverage reporting with Codecov integration\n- Build artifact management and quality gates\n- Add Dependabot configuration for automated dependency updates\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git log:*)",
      "Bash(grep:*)",
      "Bash(gh pr diff:*)"
    ],
    "deny": [],
    "ask": []
  }
}
