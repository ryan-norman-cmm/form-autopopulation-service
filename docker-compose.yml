# Form Auto-Population Infrastructure Stack
# Kafka, Aidbox FHIR Server, and supporting services for form auto-population
# Run form-auto-population-service locally via: npx nx serve form-auto-population-service

# Configs section removed - FHIR operator now uses file-based configuration

networks:
  form-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data_aidbox:
  kafka_data:
  zookeeper_data:

services:
  # Aidbox PostgreSQL Database
  postgres-aidbox:
    image: postgres:17-alpine
    container_name: aidbox-database
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-aidbox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-aidbox}
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
    command:
      - postgres
      - -c
      - shared_preload_libraries=pg_stat_statements
      - -c
      - log_statement=all
      - -c
      - log_destination=stderr
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
    ports:
      - '5434:5432'
    volumes:
      - postgres_data_aidbox:/var/lib/postgresql/data
    networks:
      form-network:
        ipv4_address: 172.25.0.21
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-aidbox} -d ${POSTGRES_DB:-aidbox}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Aidbox FHIR Server
  aidbox:
    image: healthsamurai/aidboxone:edge
    container_name: aidbox-fhir-server
    pull_policy: always
    depends_on:
      postgres-aidbox:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - '8081:8080'
    volumes:
      - /tmp/aidbox-init-bundle.json:/tmp/aidbox-init-bundle.json:ro
    environment:
      BOX_ADMIN_PASSWORD: ${AIDBOX_ADMIN_PASSWORD}
      BOX_BOOTSTRAP_FHIR_PACKAGES: hl7.fhir.r4.core#4.0.1
      BOX_COMPATIBILITY_VALIDATION_JSON__SCHEMA_REGEX: '#{:fhir-datetime}'
      BOX_DB_DATABASE: ${POSTGRES_DB:-aidbox}
      BOX_DB_HOST: postgres-aidbox
      BOX_DB_PASSWORD: ${POSTGRES_PASSWORD}
      BOX_DB_PORT: '5432'
      BOX_DB_USER: ${POSTGRES_USER:-aidbox}
      AIDBOX_LICENSE: ${AIDBOX_LICENSE_KEY}
      BOX_FHIR_COMPLIANT_MODE: true
      BOX_FHIR_CORRECT_AIDBOX_FORMAT: true
      BOX_FHIR_CREATEDAT_URL: https://aidbox.app/ex/createdAt
      BOX_FHIR_SCHEMA_VALIDATION: true
      BOX_FHIR_SEARCH_AUTHORIZE_INLINE_REQUESTS: true
      BOX_FHIR_SEARCH_CHAIN_SUBSELECT: true
      BOX_FHIR_SEARCH_COMPARISONS: true
      BOX_FHIR_TERMINOLOGY_SERVICE_BASE_URL: https://tx.health-samurai.io/fhir
      BOX_ROOT_CLIENT_SECRET: ${AIDBOX_CLIENT_SECRET}
      BOX_SEARCH_INCLUDE_CONFORMANT: true
      BOX_SECURITY_AUDIT_LOG_ENABLED: true
      BOX_SECURITY_DEV_MODE: true
      BOX_SETTINGS_MODE: read-write
      BOX_WEB_BASE_URL: http://localhost:8081
      BOX_WEB_PORT: 8080
      # Kafka Subscription Configuration
      BOX_SUBSCRIPTION_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      BOX_SUBSCRIPTION_KAFKA_ENABLED: true
      # FHIR Resources Initialization
      BOX_INIT_BUNDLE: 'file:///tmp/aidbox-init-bundle.json'
    networks:
      form-network:
        ipv4_address: 172.25.0.30
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Zookeeper for Kafka coordination
  zookeeper:
    image: bitnami/zookeeper:3.9.3
    container_name: kafka-zookeeper
    ports:
      - '2182:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_SERVER_ID=1
      - ZOO_SERVERS=zookeeper:2888:3888
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '2181']
      interval: 30s
      timeout: 10s
      retries: 4
      start_period: 30s
    networks:
      form-network:
        ipv4_address: 172.25.0.40
    restart: unless-stopped

  # Kafka message broker
  kafka:
    image: bitnamilegacy/kafka:3.9.0
    container_name: kafka-broker
    ports:
      - '9093:9092' # Internal port
      - '9094:9094' # External port for host access
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Producer and Transaction Configuration
      - KAFKA_CFG_ENABLE_IDEMPOTENCE=true
      - KAFKA_CFG_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION=5
      - KAFKA_CFG_ACKS=all
      - KAFKA_CFG_RETRIES=2147483647
      - KAFKA_CFG_TRANSACTION_STATE_LOG_NUM_PARTITIONS=1
      - KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      form-network:
        ipv4_address: 172.25.0.41
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'kafka-topics.sh --bootstrap-server localhost:9092 --list',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kafdrop UI for Kafka management
  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    container_name: kafka-ui
    platform: linux/amd64
    ports:
      - '19001:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:9092'
      JVM_OPTS: '-Xms32M -Xmx64M'
      SERVER_SERVLET_CONTEXTPATH: '/'
    depends_on:
      - kafka
    networks:
      form-network:
        ipv4_address: 172.25.0.42
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:9000',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
