name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get affected projects
        id: affected
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            AFFECTED=$(npx nx show projects --affected --base=origin/${{ github.base_ref }} --head=HEAD --json)
          else
            AFFECTED=$(npx nx show projects --affected --base=HEAD~1 --json)
          fi
          echo "affected=$AFFECTED" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.affected != '[]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx nx affected -t lint --base=origin/${{ github.base_ref }} --head=HEAD
          else
            npx nx affected -t lint --base=HEAD~1
          fi

  typecheck:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.affected != '[]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx nx affected -t build --base=origin/${{ github.base_ref }} --head=HEAD
          else
            npx nx affected -t build --base=HEAD~1
          fi

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.affected != '[]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx nx affected -t test --base=origin/${{ github.base_ref }} --head=HEAD --coverage
          else
            npx nx affected -t test --base=HEAD~1 --coverage
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.affected != '[]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build affected projects
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx nx affected -t build --base=origin/${{ github.base_ref }} --head=HEAD
          else
            npx nx affected -t build --base=HEAD~1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: |
            dist/
            !dist/**/*.map
          retention-days: 7

  e2e:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.affected != '[]' && (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    services:
      postgres-aidbox:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: aidbox
          POSTGRES_PASSWORD: qawcX9QCjB
          POSTGRES_DB: aidbox
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

      postgres-forms:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: forms_user
          POSTGRES_PASSWORD: forms_password
          POSTGRES_DB: forms_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5435:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          npx nx affected -t e2e --base=HEAD~1
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_USER: aidbox
          POSTGRES_PASSWORD: qawcX9QCjB
          POSTGRES_DB: aidbox
          FORMS_DB_HOST: localhost
          FORMS_DB_PORT: 5435
          FORMS_DB_USERNAME: forms_user
          FORMS_DB_PASSWORD: forms_password
          FORMS_DB_NAME: forms_db

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  quality-gate:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.typecheck.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "One or more quality checks failed"
            exit 1
          fi
          echo "All quality checks passed"